# -*- coding: utf-8 -*-
"""DeepLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mdCCnbUQJOijzrwZVtlerYfbbgJKTTl
"""

import tensorflow as tf
from tensorflow.python.keras.models import model_from_json
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, precision_score, \
                             recall_score, f1_score, roc_curve, \
                             accuracy_score, roc_auc_score

class DeepLearning :
  def __init__(self, model_name, train_x, train_y, test_x, test_y) :

    self.__model_name = model_name
    self.__train_x = train_x
    self.__train_y = train_y
    self.__test_x  = test_x
    self.__test_y  = test_y

  def set_model(self, model) :
    self.__model = model

  def model_predict(self, test_x) :
    self.__predict = self.__model.predict(test_x).reshape(-1)
    self.__y_pred = [round(pred) for pred in self.__predict] 
    print('Done')

  def roc(self) : # 0 : positive  1 : negative

    thresholds = np.arange(1, 0, -0.01)
    self.__fpr = []
    self.__tpr = []
    for threshold in thresholds :
      fp  = 0
      tp  = 0
      an  = 0   # actual negative
      ap  = 0   # actual positive
      clf = [1 if predict > threshold else 0 for predict in self.__predict]
      
      for idx in range(len(clf)) :
        if self.__test_y[idx] == 1 :
          an += 1
          if clf[idx] == 0 :
            fp += 1
        else :
          ap += 1
          if clf[idx] == 0 :
            tp += 1
      self.__fpr.append(fp/an)
      self.__tpr.append(tp/ap)
  
  def plot_roc(self, path) :

    self.roc()
    fig = plt.figure(figsize = (10, 8))
    plt.plot(self.__fpr, self.__tpr)
    plt.plot([0, 1], [0, 1])
    plt.title(self.__model_name + ' ROC Curve')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')

    plt.ylim(0, 1)
    plt.xlim(0, 1)
    plt.savefig(path + self.__model_name + '_roc.png', dpi = 300)

  def plot_confusion_matrix(self, path) :

    fig = plt.figure(figsize = (10, 8))
    plt.title(self.__model_name + 'Confusion Matrix')
    # annot : cell에 숫자 표현 유무, fmt : 숫자 형태(d : 정수)
    # cmap : color, cbar : color bar 유무
    sns.heatmap(self.get_confusion_matrix(), annot = True, fmt = 'd', 
                cbar = False, cmap = sns.color_palette("Purples",2),
                xticklabels = ['Positive', 'Negative'],
                yticklabels = ['Positive', 'Negative'])
    plt.xlabel('Actuals')
    plt.ylabel('Predicted')
    plt.savefig(path + self.__model_name + '_confusion_matrix.png', dpi = 300)

  def get_confusion_matrix(self) :
    self.__confusion_matrix = confusion_matrix(self.__test_y, self.__y_pred)
    return self.__confusion_matrix
  
  def __set_precision(self) :
    self.__precision = precision_score(self.__test_y, self.__y_pred)

  def __set_recall(self) :
    self.__recall = recall_score(self.__test_y, self.__y_pred)
  
  def __set_f1(self) :
    self.__f1_score = f1_score(self.__test_y, self.__y_pred)

  def __set_Acc(self) :
    self.__acc = accuracy_score(self.__test_y, self.__y_pred)

  def __set_auc(self) :
    self.__auc = roc_auc_score(self.__test_y, self.__y_pred)

  def __set_roc(self) :
    self.__roc = roc_curve(self.__test_y, self.__y_pred)

  def set_metrics(self) :
    self.__set_precision()
    self.__set_recall()
    self.__set_f1()
    self.__set_Acc()
    self.__set_roc()
    self.__set_auc()
    print('Done')

  def get_metrics(self) :
    return {'precision' : round(self.__precision, 4),
            'recall'    : round(self.__recall, 4),
            'f1_score'  : round(self.__f1_score, 4),
            'accuracy'  : round(self.__acc, 4),
            'auc'       : round(self.__auc, 4)
            }
  
  def metrics(self) :
    return 'Precision : {0} \nRecall : {1} \nF1 score : {2} \nAccuracy : {3} \nAUC : {4}'.format(\
      round(self.__precision, 2), round(self.__recall, 2), round(self.__f1_score, 2), \
      round(self.__acc, 2), round(self.__auc, 2))
  
  def __str__(self) :
    return 'model name : {0} \nmodel Acc : {1}'.format(self.__model_name, self.__acc)

  